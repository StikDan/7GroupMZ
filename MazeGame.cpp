// MazeGame.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
#include <conio.h>
#include "time.h"
#include "windows.h"
//#include "CrtLib.h"
#include "CrtLib/CrtLib.h"

using namespace std;
using namespace crt;

const int LX = 75;
const int LY = 30;

const char player = (char)1;
// 0 - пустое пространство
// 1 - стена 
// 2 - выход
// 3 - игрок
// 4 - монета

int maze[LY][LX] = {
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
    {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,4,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
    {1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,8,1,1,1,1,1,1,1,1},
    {1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1},
    {1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1},
    {1,1,0,0,0,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,4,1,1,1,1,1,1,1,1},
    {1,1,4,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1},
    {1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,8,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1},
    {1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,4,0,0,0,4,0,0,0,7,0,0,0,0,0,1,1,1},
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1},
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1},
    {1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1},
    {1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,4,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1},
    {1,1,7,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1},
    {1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,8,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1},
    {1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,4,1,1,1,1,4,0,0,0,0,0,8,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1},
    {1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1},
    {1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1},
    {1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,4,1,1,1,1,1,1,1,0,1,1,1},
    {1,1,0,0,0,0,0,0,0,0,0,4,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1},
    {1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,4,1,1,1,1,1,1,0,1,1,1,1,1,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1},
    {1,1,4,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1},
    {1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1},
    {1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1},
    {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1},
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1},
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,4,0,0,1,1,1,1,1},
    {1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
};

int hx, hy; // Позиция игрока в лабиринте
int score = 0; // Счет игры
int gameState = 0; // 0 - игра продолжается, 1 - выигрыш, 2 - закончилось время
int timeLimit = 180; // Лимит игры в секундах
int gameTime; // Оставшееся время
int bonusTime = 0; //бонусное время

clock_t tstart; // Значение счетчика таймера при старте игры

// Функция обновляет текущий счет на экране
void UpdateScore(int score) {
    setlocale(LC_ALL, "ru-RU");
    GotoXY(35, 30); // Устанавливаем курсор на последнюю строку консоли
    crt::SetTextColor(COLOR_LIGHT_BLUE); // Устанавливаем цвет для счета (голубой)
    cout << "СЧЕТ: " << score;  // Выводим счет на экран
    crt::SetTextColor(COLOR_WHITE); // Сброс цвета

}
// Функция печатает в консоли лабиринт
void PrintMaze(int maze[LY][LX], int sizeX, int sizeY)
{
    for (int i = 0; i < sizeY; i++)
    {
        for (int j = 0; j < sizeX; j++)
        {
            switch (maze[i][j])
            {
            case 0:
                cout << ' '; //пусто
                break;
            case 1:
                crt::SetTextColor(crt::COLOR_RED);
                cout << (char)178; //стена
                break;
            case 2:
                crt::SetTextColor(crt::COLOR_GRAY);
                cout << (char)176; //дверь
                break;
            case 3:
                crt::SetTextColor(crt::COLOR_WHITE);
                cout << player; //игрок
                break;
            case 4:
                crt::SetTextColor(crt::COLOR_YELLOW);
                cout << '$'; //монета
                break;
            case 5:
                //TODO: добавить цвет алмаза
                cout << (char)4; //алмаз
                break;
            case 6:
                //TODO: добавить цвет времени
                cout << (char)30; //время
                break;
            case 7: //мина бонусы
                crt::SetTextColor(crt::COLOR_DARK_GRAY);
                cout << (char)15;
                break;
            case 8: //мина время
                crt::SetTextColor(crt::COLOR_DARK_GRAY);
                cout << (char)15;
                break;
            default:
                cout << '?'; // = когда неизвестный символ
            }
        }
        crt::SetTextColor(crt::COLOR_WHITE); // Сброс цвета после отображения строки
        cout << endl;
    }
}

// Функция обновляет оставшееся время до окончания игры
void UpdateClock(clock_t t) {
    gameTime = timeLimit + bonusTime - (t - tstart) / CLOCKS_PER_SEC;

    if (gameTime < 0) {
        gameState = 2; // Если время закончилось, обновляем статус игры на 2 (проигрыш)
    }
    else {
        GotoXY(49, 30); // Устанавливаем курсор на последнюю строку
        crt::SetTextColor(gameTime <= 15 ? crt::COLOR_LIGHT_RED : crt::COLOR_LIGHT_GREEN); // Меняем цвет в зависимости от времени
        cout << "Осталось: " << gameTime << " секунд "; // Выводим остаток времени в консоль
        crt::SetTextColor(crt::COLOR_WHITE); // Сбрасываем цвет на стандартный
    }
}
// Функция находит первую позицию игрока в массиве
// Функция определяет позицию игрока в массиве, обновляя значения глобальных переменных hx и hy
struct PlayerPosition {
    int x;
    int y;
    bool valid;
};

PlayerPosition FindFirstPlayerPosition(const int maze[LY][LX], int sizeX, int sizeY) {
    PlayerPosition position = { -1, -1, false };
    int countDoors = 0;

    for (int i = 0; i < sizeY; i++) {
        for (int j = 0; j < sizeX; j++) {
            if (maze[i][j] == 3) {
                position.x = j;
                position.y = i;
                position.valid = true;
            }
            else if (maze[i][j] == 2) {
                countDoors++;
            }
        }
    }

    if (position.valid && countDoors >= 1) {
        return position;
    }
    else {
        cout << "Лабиринт не является валидным, вы не можете продолжить игру." << endl;
        exit(1);
    }
}
// Показывает на экране игрока и записывает его в лабиринт
void ShowPlayer() {
    maze[hy][hx] = 3; // Указываем, что в текущей позиции находится игрок
    GotoXY(hx, hy); // Устанавливаем курсор в позицию игрока в консоли
    cout << player; // Отображаем символ игрока
}
// Убирает игрока с экрана
void HidePlayer() {
    maze[hy][hx] = 0; // Убираем игрока с текущей позиции
    GotoXY(hx, hy); // Устанавливаем курсор в текущую позицию игрока
    cout << ' '; // Очищаем позицию в консоли
}
// Функции для перемещения игрока
void MovePlayer(int dx, int dy)
{
    if (hx + dx < LX && hy + dy < LY && hx + dx >= 0 && hy + dy >= 0)
    {
        switch (maze[hy + dy][hx + dx])
        {
        case 0:
            HidePlayer();
            hx = hx + dx;
            hy = hy + dy;
            ShowPlayer();
            break;
        case 2:
            HidePlayer();
            hx = hx + dx;
            hy = hy + dy;
            ShowPlayer();
            UpdateScore(score += 500);
            gameState = 1;
            break;
        case 4:
            HidePlayer();
            hx = hx + dx;
            hy = hy + dy;
            ShowPlayer();
            UpdateScore(score += 100);
            break;
        case 5:
            HidePlayer();
            hx = hx + dx;
            hy = hy + dy;
            ShowPlayer();
            UpdateScore(score += 300);
            break;
        case 6:
            HidePlayer();
            hx = hx + dx;
            hy = hy + dy;
            ShowPlayer();
            UpdateClock(bonusTime += 10);
            break;
        case 7: //мина бонусы
            HidePlayer();
	    hx = hx + dx;
            hy = hy + dy;
            ShowPlayer();
            UpdateScore(score -= 200);
            break;
        case 8: //мина время
            HidePlayer();
	    hx = hx + dx;
            hy = hy + dy;
            ShowPlayer();
            UpdateClock (timeLimit -= 8);
            break;
	}
    }
}
       

// Функция управления игрой
void Control()
{
    tstart = clock();  // запоминаем счетчик системного таймера в момент старта игры.
    UpdateScore(score); // обновляем счет игры, изначально он нулевой
    unsigned char x;  // это переменная хранит символ, соответствующий нажатой клавише
    while (gameState == 0)  // цикл игры - пока gameState == 0, игра идет
    {
        UpdateClock(clock());   // обновляем оставшееся время
        if (_kbhit())           // если была нажата клавиша - то обрабатываем ее, иначе следующая
        {                       // итерация игрового цикла
            x = _getch();       // считываем символ нажатой клавиш,
            if (x == 27) return;// если это символ Esc (27) то это выход из игры
            if (x == 0xe0)      // если это символ с кодом 0xE0 (шестнадцатеричное)
                switch (_getch()) // то считываем еще один символ (некоторые клавиши выдают двойные коды)
                {
                case 72:          // если 2-й символ код 72, то это клавиша курсор вверх
                    MovePlayer(0, -1);       // идем вверх
                    break;
                case 80:          // если 2-й символ код 80, то это клавиша курсор вниз
                    MovePlayer(0, 1);   // идем вниз
                    break;
                case 75:        // если 2-й символ код 75, то это клавиша курсор влево
                    MovePlayer(-1, 0);   // идем влево
                    break;
                case 77:
                    MovePlayer(1, 0);  // если 2 - й символ код 77, то это клавиша курсор вправо
                    break;      // идем вправо
                }
        }
        Sleep(200);             // останавливаем игру на 200 мсек, если этого не делать, то
    }                           // обновление игры будет слишком быстрым, мы не сможем управлять
}                               // игроком, а также напрасно нагрузим процессор ненужной работой

// Функция для отображения сообщения о завершении игры
void ShowGameOverMessage() {
    system("cls");
    setlocale(LC_ALL, "ru-RU");

    if (gameState == 1) { // Если выигрыш
        crt::SetTextColor(COLOR_LIGHT_GREEN); // Зеленый текст
        cout << "Поздравляем! Вы выиграли! Ваш счет: " << score << endl;
    }
    else if (gameState == 2) { // Если проигрыш
        crt::SetTextColor(COLOR_RED); // Красный текст
        cout << "Время вышло! Вы проиграли. Ваш счет: " << score << endl;
    }

    crt::SetTextColor(COLOR_WHITE); // Сброс цвета
    cout << "Нажмите любую клавишу для выхода...";
    _getch(); // Ждем нажатия клавиши
}

// Функция main, которая выполняется при запуске программы
int main() {
    system("mode con cols=80 lines=31");
    system("cls");
    PrintMaze(maze, LX, LY);

    PlayerPosition playerPos = FindFirstPlayerPosition(maze, LX, LY);
    hx = playerPos.x;
    hy = playerPos.y;

    HideCursor();
    Control();
    ShowCursor();
    ShowGameOverMessage();
    return 0;
}
